一：复习
二：正则表达式RegExp:regular expression
1,正则表达式：是一个描述字符模式的对象；
2，使用方法:
      2.1构造函数
           var reg1=new RegExp("qwe","gi");
            new RegExp(Pattern,Attribute);
            Pattern:是一个字符串的形式，代表的是正则
            Attributes:为可选字符串，包含属性g,i
            g:全局
            i：忽略大小写

      2.2字面量形式创建
      var reg2=/123/gi;

      2.3二者的区别
        在字符串中"\"是转译字符，会进行转译处理。所以在使用构造函数创建表达式时候，需要注意对“\”进行转译；而在使用字面量时则不需要。
3，检测是否匹配
      test:reg.test(str);检索字符串中指定的值，返回false或true

      exec:reg.exec(str)检索字符返回查 找结果的第一个值

      match:str1.match(reg1)

      search:str6.search(reg6)匹配到的是字符在字符串中的索引值,如果未匹配到则返回-1

      replace:str7.replace(reg7,"*")返回的是替换后的新字符串，不会改变原来字符串

      split:str10.split(reg10)以正则匹配到的字符为分隔，将字符串 分割为数组

4,lastIndex:全局匹配时，lastIndex会从自动匹配到的字符开始继续匹配（即：正则每被执行一次，lastIndex的值都会发生改变）

5.元字符
\d:0-9,数字
\w:（变量命名规则联系在一起，数字、字母、下划线）
\s:空白字符
.:匹配任意字符，但除却换行符
\n:换行
\u:匹配汉字

6,表达式的匹配
[abc]中间的任意字符
[^abc]除却abc
[0-9]
[a-z]
[A-Z]
\w=[a-zA-Z0-9_]

7,长度
+:至少一个
？：0个或1个
*：0个或多个
{3}3个
{3，5}3到5个

8,匹配当前所在位置
8.1:^起始值
8.2:$字符串的结尾
8.3:/^xxx$/同时使用^和$对字符串进行匹配，字符串 必须跟中间的xxx保持高度一致才能正确匹配
8.4:|左边或者右边
8.5特殊字符匹配用\
8.6中文\u ,两个起始值：4e00-9fa5


IP   10.0.29.156
        0.0.0.0-255.255.255.255

常见邮箱地址:






